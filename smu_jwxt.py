# -*- coding: utf-8 -*-
import time
import lxml
import lxml.html
import requests
from PyQt5.QtCore import QStringListModel, QThread, pyqtSignal
from PyQt5.QtGui import QFontDatabase
from PyQt5.QtWidgets import QWidget, QApplication, QDesktopWidget
from datetime import datetime
# Form implementation generated from reading ui file 'smu_jwxt.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import res.image
import webbrowser
from PyQt5 import QtCore, QtGui, QtWidgets
from MessageBox import Ui_Form_MessageBox


# 抢课线程类
class StartThread(QThread):
    # 信号量
    string_signal = pyqtSignal(str)

    def __init__(self, ui_form_instance):
        super(StartThread, self).__init__()
        # 保存对Ui_Form实例的引用
        self.ui_form_instance = ui_form_instance
        self.running = False  # 控制运行状态的标志


    def run(self):
        self.running = True  # 当线程启动时，设置运行状态为True
        # 获取参数
        self.Cookies = str(self.ui_form_instance.lineEdit_6.text())
        self.ProfileId = str(self.ui_form_instance.lineEdit_8.text())
        self.Lessonid = str(self.ui_form_instance.lineEdit_7.text())
        self.Waittime = float(self.ui_form_instance.lineEdit_5.text())
        # 开始抢课
        self.elecSessionTime = self.get_sessiontime(self.ProfileId, self.Cookies)

        # self.active_threads = []
        while self.running:
            # # 移除已经完成的线程
            # active_threads = [t for t in self.active_threads if t.is_alive()]
            #
            # # 当活跃线程少于指定数量时，启动新线程
            # while len(active_threads) < self.Threadnum and self.running:
            #     t = threading.Thread(target=self.ui_form_instance.elect,
            #                          args=(self.ProfileId, self.elecSessionTime, self.Cookies, self.Lessonid))
            #     t.start()
            #     active_threads.append(t)
            self.result = self.ui_form_instance.elect(self.ProfileId, self.elecSessionTime, self.Cookies, self.Lessonid)
            need_refresh = "同时打开多个选课页面，请至最新页面进行操作"
            # 检查是否要重新获取sessiontime
            if need_refresh in self.result:
                self.string_signal.emit("选课页面失效，重新获取sessiontime")
                QApplication.processEvents()  # 强制立即处理事件队列中的事件
                self.elecSessionTime = self.get_sessiontime(self.ProfileId, self.Cookies)
                self.string_signal.emit("获取到新的sessiontime="+str(self.elecSessionTime))
            # 等待间隔
            time.sleep(self.Waittime)
            # 检查运行状态，如果不再运行则退出循环
            if not self.running:
                # 发出结束信号
                # # 等待所有线程完成
                # for t in self.active_threads:
                #     t.join()
                self.string_signal.emit("已停止抢课")
                break

    def stop(self):
        self.running = False  # 用于停止线程循环
        # 发出结束信号
        # # 等待所有线程完成
        # for t in self.active_threads:
        #     t.join()
        self.string_signal.emit("已发出停止指令，等待停止······")

    def get_sessiontime(self, profileId, cookies):
        while True:
            try:
                url = "https://jwxt.shmtu.edu.cn/shmtu/stdElectCourse!defaultPage.action?electionProfile.id=" + str(
                    profileId)
                headers = {
                    "Host": "jwxt.shmtu.edu.cn",
                    "Connection": "keep-alive",
                    "sec-ch-ua": '"Google Chrome";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
                    "Accept": "text/html, */*; q=0.01",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-Requested-With": "XMLHttpRequest",
                    "sec-ch-ua-mobile": "?0",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
                    "sec-ch-ua-platform": '"Windows"',
                    "Origin": "https://jwxt.shmtu.edu.cn",
                    "Sec-Fetch-Site": "same-origin",
                    "Sec-Fetch-Mode": "cors",
                    "Sec-Fetch-Dest": "empty",
                    "Accept-Encoding": "gzip, deflate, br",
                    "Accept-Language": "zh-CN,zh;q=0.9",
                    "Cookie": cookies
                }
                result = requests.get(url, headers=headers)
                data = result.text
                # print(data)
                # 解析HTML
                tree = lxml.html.fromstring(data)
                # 使用XPath定位元素
                element = tree.xpath('/html/body/form[1]/input')[0]  # [0]用于获取第一个匹配的元素
                # 从元素中提取value属性
                value = element.get('value')
                print("sessiontime=" + value)  # 打印提取的value值
                return value
            except Exception as e:
                print("get_sessiontime出错")
                print("错误信息：", e)
                self.string_signal.emit("get_sessiontime出错")
                self.string_signal.emit("错误信息：" + str(e))
                time.sleep(2)

#消息提示窗口
class Ui_MessageBox(QWidget, Ui_Form_MessageBox):
    def __init__(self, text=""):
        super().__init__()
        self.setupUi(self)
        #设置传入的text
        self.label_20.setText(text)
        # 设置无边框
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        # 设置主背景透明
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        # Form.resize(960, 535)
        screen = QDesktopWidget().screenGeometry();  # 获取屏幕大小
        width = screen.width()  # 宽
        height = screen.height()  # 窄
        Form.resize(width / 2, height / 2)

        # 加载字体
        fontId = QFontDatabase.addApplicationFont("res/Alibaba-PuHuiTi-Medium.ttf")
        fontFamily = QFontDatabase.applicationFontFamilies(fontId)[0]

        Form.setStyleSheet("font-family: 57 12pt \"Alibaba PuHuiTi Medium\";")
        self.tabWidget = QtWidgets.QTabWidget(Form)
        self.tabWidget.setGeometry(QtCore.QRect(170, 70, 721, 401))
        self.tabWidget.setStyleSheet("QTabWidget::pane{\n"
"min-width:70px;\n"
"min-height:25px;\n"
"border-top: 1px solid;\n"
"border-color: white;\n"
"}\n"
"\n"
"QTabBar::tab {\n"
"\n"
"min-width:150px;\n"
"\n"
"min-height:25px;\n"
"\n"
"color: white;\n"
"\n"
"font: 57 12pt \"Alibaba PuHuiTi Medium\";\n"
"\n"
"border: 0px solid;\n"
"\n"
"\n"
"\n"
"}\n"
"\n"
"QTabBar::tab:selected{\n"
"\n"
"min-width:150px;\n"
"\n"
"min-height:25px;\n"
"color: white;\n"
"\n"
"font: 57 13pt \"Alibaba PuHuiTi Medium\";\n"
"\n"
"border: 0px solid;\n"
"\n"
"border-bottom: 4px solid;\n"
"\n"
"border-color: #4796f0;\n"
"\n"
"}\n"
"")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.label_12 = QtWidgets.QLabel(self.tab_1)
        self.label_12.setGeometry(QtCore.QRect(0, 10, 91, 41))
        self.label_12.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";")
        self.label_12.setObjectName("label_12")
        self.label_8 = QtWidgets.QLabel(self.tab_1)
        self.label_8.setGeometry(QtCore.QRect(0, 130, 91, 41))
        self.label_8.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";")
        self.label_8.setObjectName("label_8")
        self.label_10 = QtWidgets.QLabel(self.tab_1)
        self.label_10.setGeometry(QtCore.QRect(330, 130, 81, 41))
        self.label_10.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";")
        self.label_10.setObjectName("label_10")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.tab_1)
        self.lineEdit_6.setGeometry(QtCore.QRect(90, 10, 631, 41))
        self.lineEdit_6.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";\n"
"background-color: rgb(38, 43, 75);")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab_1)
        self.lineEdit_5.setGeometry(QtCore.QRect(420, 130, 161, 41))
        self.lineEdit_5.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";\n"
"background-color: rgb(38, 43, 75);")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.tab_1)
        self.lineEdit_7.setGeometry(QtCore.QRect(90, 130, 221, 41))
        self.lineEdit_7.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";\n"
"background-color: rgb(38, 43, 75);")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.pushButton_43 = QtWidgets.QPushButton(self.tab_1)
        self.pushButton_43.setGeometry(QtCore.QRect(600, 130, 121, 41))
        self.pushButton_43.setStyleSheet("QPushButton {    \n"
"    color: white;\n"
"    font: 57 12pt \"Alibaba PuHuiTi Medium\";\n"
"    border-image: url(:/button/button_unselected.png);\n"
"}\n"
"QPushButton:hover {\n"
"    color: black;\n"
"    border-image: url(:/button/button_selected.png);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(25, 40, 50);\n"
"}\n"
"border-image: url(:/button/button_unselected.png);")
        self.pushButton_43.setObjectName("pushButton_43")
        self.label_11 = QtWidgets.QLabel(self.tab_1)
        self.label_11.setGeometry(QtCore.QRect(0, 70, 91, 41))
        self.label_11.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";")
        self.label_11.setObjectName("label_11")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.tab_1)
        self.lineEdit_8.setGeometry(QtCore.QRect(90, 70, 631, 41))
        self.lineEdit_8.setStyleSheet("color: white;\n"
"font: 75 12pt \"Alibaba PuHuiTi Medium\";\n"
"background-color: rgb(38, 43, 75);")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.VitsListView = QtWidgets.QListView(self.tab_1)
        self.VitsListView.setGeometry(QtCore.QRect(0, 180, 721, 191))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(24, 24, 24))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.VitsListView.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("57 12pt Alibaba PuHuiTi Medium")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.VitsListView.setFont(font)
        self.VitsListView.setStyleSheet("background-color: rgb(24, 24, 24); color: rgb(255, 255, 255);")
        self.VitsListView.setObjectName("VitsListView")
        self.tabWidget.addTab(self.tab_1, "")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(10, 10, 941, 521))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("res/background.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 151, 151))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("res/LOGO.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.btn_close = QtWidgets.QPushButton(Form)
        self.btn_close.setGeometry(QtCore.QRect(860, 60, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_close.sizePolicy().hasHeightForWidth())
        self.btn_close.setSizePolicy(sizePolicy)
        self.btn_close.setMinimumSize(QtCore.QSize(20, 0))
        self.btn_close.setMaximumSize(QtCore.QSize(40, 16777215))
        self.btn_close.setStyleSheet("QPushButton {    \n"
"    border: none;\n"
"    border-radius: 6px;\n"
"    background-color: transparent;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(52, 59, 72);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(25, 40, 50);\n"
"}")
        self.btn_close.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("res/close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_close.setIcon(icon)
        self.btn_close.setObjectName("btn_close")
        self.btn_minimize = QtWidgets.QPushButton(Form)
        self.btn_minimize.setGeometry(QtCore.QRect(830, 60, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_minimize.sizePolicy().hasHeightForWidth())
        self.btn_minimize.setSizePolicy(sizePolicy)
        self.btn_minimize.setMinimumSize(QtCore.QSize(20, 0))
        self.btn_minimize.setMaximumSize(QtCore.QSize(40, 16777215))
        self.btn_minimize.setStyleSheet("QPushButton {    \n"
"    border: none;\n"
"    border-radius: 6px;\n"
"    background-color: transparent;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(52, 59, 72);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(25, 40, 50);\n"
"}")
        self.btn_minimize.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("res/minimize.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_minimize.setIcon(icon1)
        self.btn_minimize.setObjectName("btn_minimize")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(60, 230, 101, 41))
        self.pushButton_4.setStyleSheet("QPushButton {    \n"
"    color: white;\n"
"    font: 57 12pt \"Alibaba PuHuiTi Medium\";\n"
"    border-image: url(:/button/button_unselected.png);\n"
"}\n"
"QPushButton:hover {\n"
"    color: black;\n"
"    border-image: url(:/button/button_selected.png);\n"
"}\n"
"QPushButton:pressed {    \n"
"    color: white;\n"
"    font: 57 12pt \"Alibaba PuHuiTi Medium\";\n"
"    border-image: url(:/button/button_unselected.png);\n"
"}\n"
"border-image: url(:/button/button_unselected.png);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        self.pushButton_5.setGeometry(QtCore.QRect(60, 150, 101, 41))
        self.pushButton_5.setStyleSheet("QPushButton {    \n"
"    color: white;\n"
"    font: 57 12pt \"Alibaba PuHuiTi Medium\";\n"
"    border-image: url(:/button/button_unselected.png);\n"
"}\n"
"QPushButton:hover {\n"
"    color: black;\n"
"    border-image: url(:/button/button_selected.png);\n"
"}\n"
"QPushButton:pressed {    \n"
"    color: white;\n"
"    font: 57 12pt \"Alibaba PuHuiTi Medium\";\n"
"    border-image: url(:/button/button_unselected.png);\n"
"}\n"
"border-image: url(:/button/button_unselected.png);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.label.raise_()
        self.tabWidget.raise_()
        self.label_2.raise_()
        self.btn_close.raise_()
        self.btn_minimize.raise_()
        self.pushButton_4.raise_()
        self.pushButton_5.raise_()

        self.retranslateUi(Form)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.log_data = []

        # 绑定button到槽函数
        # 关闭窗口按钮
        self.btn_close.clicked.connect(self.close)
        # 最小化窗口按钮
        self.btn_minimize.clicked.connect(self.showMinimized)
        # 打开帮助文档
        self.pushButton_5.clicked.connect(self.openHelpPage)
        # 打开项目仓库
        self.pushButton_4.clicked.connect(self.openGithubPage)
        # 开始抢课，绑定到多线程类上
        self.pushButton_43.clicked.connect(self.Start)



    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "上海海事大学抢课辅助软件"))
        self.label_12.setText(_translate("Form", "Cookies(*)"))
        self.label_8.setText(_translate("Form", "Lessonid(*)"))
        self.label_10.setText(_translate("Form", "间隔秒数(*)"))
        self.lineEdit_6.setText(_translate("Form", "JSESSIONID=XXXX; Hm_lvt_XX=XXX; Hm_lpvt_XX=XXX; "))
        self.lineEdit_5.setText(_translate("Form", "1"))
        self.lineEdit_7.setText(_translate("Form", "222000"))
        self.pushButton_43.setText(_translate("Form", "开始/结束抢课"))
        self.label_11.setText(_translate("Form", "ProfileId(*)"))
        self.lineEdit_8.setText(_translate("Form", "2000"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("Form", "SMU抢课"))
        self.btn_close.setToolTip(_translate("Form", "Close"))
        self.btn_minimize.setToolTip(_translate("Form", "Minimize"))
        self.pushButton_4.setText(_translate("Form", "项目仓库"))
        self.pushButton_5.setText(_translate("Form", "帮助文档"))

    # 消息提示窗
    def showMessageBox(self,text):
        # 创建新窗口的实例
        self.form_message_box = Ui_MessageBox(text)
        # 显示新窗口
        self.form_message_box.show()

    # 打开帮助文档
    def openHelpPage(self):
         # 使用默认浏览器打开网页
        webbrowser.open("https://github.com/EricHongXDD/smu_course_election_helper/blob/main/README.md")

    # 打开仓库界面
    def openGithubPage(self):
         # 使用默认浏览器打开网页
        webbrowser.open("https://github.com/EricHongXDD/smu_course_election_helper")

    def set_listView_content(self):
        # 使用QStringListModel来设置listView的数据
        model = QStringListModel()
        model.setStringList(self.log_data)
        self.VitsListView.setModel(model)
        # 滚动到底部
        self.VitsListView.scrollToBottom()

    def add_string_to_listView(self, new_string):
        # 获取当前时间
        current_time = datetime.now()
        # 将时间转换为字符串格式
        time_string = current_time.strftime('%m-%d %H:%M:%S ')
        new_string = time_string + new_string
        self.log_data.append(new_string)
        # 更新 listView 的内容
        self.set_listView_content()

    def exam(self):
        if self.lineEdit_5.text() != '' and self.lineEdit_6.text() != '' and self.lineEdit_7.text() != '' and self.lineEdit_8.text() != '':
            try:
                self.Cookies = str(self.lineEdit_6.text())
                self.ProfileId = str(self.lineEdit_8.text())
                self.get_sessiontime(self.ProfileId, self.Cookies)
                return True
            except Exception as e:
                self.showMessageBox("Cookies或profileId无效")
                print("Cookies或profileId无效")
                self.add_string_to_listView("检查结果：错误信息："+str(e))
                return False
        else:
            self.showMessageBox("请填写完所有设置再开始抢课")
            self.add_string_to_listView("请填写完所有设置再开始抢课")
            return False


    def elect(self, profileId, elecSessionTime, cookies, lessonid):
        while True:
            try:
                url = "https://jwxt.shmtu.edu.cn/shmtu/stdElectCourse!batchOperator.action?profileId=" + str(
                    profileId) + "&elecSessionTime=" + str(elecSessionTime)
                headers = {
                    "Host": "jwxt.shmtu.edu.cn",
                    "Connection": "keep-alive",
                    "Content-Length": "27",
                    "sec-ch-ua": '"Google Chrome";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
                    "Accept": "text/html, */*; q=0.01",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-Requested-With": "XMLHttpRequest",
                    "sec-ch-ua-mobile": "?0",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
                    "sec-ch-ua-platform": '"Windows"',
                    "Origin": "https://jwxt.shmtu.edu.cn",
                    "Sec-Fetch-Site": "same-origin",
                    "Sec-Fetch-Mode": "cors",
                    "Sec-Fetch-Dest": "empty",
                    "Referer": "https://jwxt.shmtu.edu.cn/shmtu/stdElectCourse!defaultPage.action?electionProfile.id=" + str(
                        profileId),
                    "Accept-Encoding": "gzip, deflate, br",
                    "Accept-Language": "zh-CN,zh;q=0.9",
                    "Cookie": cookies
                }
                data = {
                    "operator0": str(lessonid) + ":true:0"
                }
                # 创建session对象，在请求之间保持cookies了
                session = requests.Session()
                # 访问主页面或者登录页面，获取并保持cookies
                session.get(
                    "https://jwxt.shmtu.edu.cn/shmtu/stdElectCourse!defaultPage.action?electionProfile.id=" + str(profileId))
                result = session.post(url, headers=headers, data=data)
                data = result.text
                # print(data)
                # 解析HTML
                tree = lxml.html.fromstring(data)
                # 使用XPath定位元素
                # 成功
                element = tree.xpath('//div[@style="width:85%;color:green;text-align:left;margin:auto;"]')
                # 检查是否找到了匹配的元素，并从中提取文本内容
                if element:
                    result = element[0].text_content().strip()  # 使用text_content()获取文本并使用strip()删除前导和尾随的空白
                else:
                    # 失败
                    element = tree.xpath('//div[@style="width:85%;color:red;text-align:left;margin:auto;"]')
                    if element:
                        result = element[0].text_content().strip()  # 使用text_content()获取文本并使用strip()删除前导和尾随的空白
                    else:
                        result = "返回结果错误!"
                print(result)
                self.add_string_to_listView(result)
                return result
            except Exception as e:
                self.log_data = []
                print("elect出错")
                print("错误信息：", e)
                self.add_string_to_listView("elect出错")
                self.add_string_to_listView("错误信息："+str(e))
                time.sleep(2)

    # 开始抢课
    def Start(self):
        # 确保self.thread是StartThread的实例
        if not hasattr(self, 'thread') or not isinstance(self.thread, StartThread):
            # 第一次点击按钮时，创建线程实例
            self.add_string_to_listView("检查Cookies及profileId的有效性中······")
            QApplication.processEvents()  # 强制立即处理事件队列中的事件
            if self.exam():
                self.thread = StartThread(self)
                self.thread.string_signal.connect(self.add_string_to_listView)
                self.thread.finished.connect(self.threadFinished)
            else:
                return

        if not self.thread.isRunning():
            # 如果线程未在运行，则启动线程
            self.add_string_to_listView("Cookies及profileId有效，即将开始抢课······")
            self.thread.start()
        else:
            # 如果线程正在运行，则停止线程
            self.thread.stop()

    # 当线程完成时调用的方法
    def threadFinished(self):
        self.thread.deleteLater()  # 删除线程对象
        self.thread = None  # 重置线程引用

    # 获取sessiontime
    def get_sessiontime(self, profileId, cookies):
        while True:
            try:
                url = "https://jwxt.shmtu.edu.cn/shmtu/stdElectCourse!defaultPage.action?electionProfile.id=" + str(
                    profileId)
                headers = {
                    "Host": "jwxt.shmtu.edu.cn",
                    "Connection": "keep-alive",
                    "sec-ch-ua": '"Google Chrome";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
                    "Accept": "text/html, */*; q=0.01",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-Requested-With": "XMLHttpRequest",
                    "sec-ch-ua-mobile": "?0",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
                    "sec-ch-ua-platform": '"Windows"',
                    "Origin": "https://jwxt.shmtu.edu.cn",
                    "Sec-Fetch-Site": "same-origin",
                    "Sec-Fetch-Mode": "cors",
                    "Sec-Fetch-Dest": "empty",
                    "Accept-Encoding": "gzip, deflate, br",
                    "Accept-Language": "zh-CN,zh;q=0.9",
                    "Cookie": cookies
                }
                result = requests.get(url, headers=headers)
                data = result.text
                # print(data)
                # 解析HTML
                tree = lxml.html.fromstring(data)
                # 使用XPath定位元素
                element = tree.xpath('/html/body/form[1]/input')[0]  # [0]用于获取第一个匹配的元素
                # 从元素中提取value属性
                value = element.get('value')
                print("sessiontime=" + value)  # 打印提取的value值
                return value
            except IndexError:
                raise
            except Exception as e:
                self.log_data = []
                print("get_sessiontime出错")
                print("错误信息：", e)
                self.add_string_to_listView("get_sessiontime出错")
                self.add_string_to_listView("错误信息："+str(e))
                QApplication.processEvents()  # 强制立即处理事件队列中的事件
                time.sleep(2)

